{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"../student.service\";\nimport * as i2 from \"@angular/forms\";\nimport * as i3 from \"@angular/common\";\n\nfunction AdminComponent_button_19_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"button\", 18);\n    i0.ɵɵtext(1, \"Luo uusi\");\n    i0.ɵɵelementEnd();\n  }\n}\n\nfunction AdminComponent_button_20_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"button\", 18);\n    i0.ɵɵtext(1, \"Tallenna muokattu\");\n    i0.ɵɵelementEnd();\n  }\n}\n\nfunction AdminComponent_tr_38_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r6 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"tr\")(1, \"td\");\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"td\");\n    i0.ɵɵtext(4);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(5, \"td\");\n    i0.ɵɵtext(6);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(7, \"td\");\n    i0.ɵɵtext(8);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(9, \"td\")(10, \"span\", 19);\n    i0.ɵɵlistener(\"click\", function AdminComponent_tr_38_Template_span_click_10_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r6);\n      const s_r4 = restoredCtx.$implicit;\n      const ctx_r5 = i0.ɵɵnextContext();\n      return ctx_r5.delete(s_r4);\n    });\n    i0.ɵɵtext(11, \"Poista\");\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(12, \"td\")(13, \"span\", 20);\n    i0.ɵɵlistener(\"click\", function AdminComponent_tr_38_Template_span_click_13_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r6);\n      const s_r4 = restoredCtx.$implicit;\n      const ctx_r7 = i0.ɵɵnextContext();\n      return ctx_r7.update(s_r4);\n    });\n    i0.ɵɵtext(14, \"Muokkaa\");\n    i0.ɵɵelementEnd()()();\n  }\n\n  if (rf & 2) {\n    const s_r4 = ctx.$implicit;\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(s_r4.studentcode);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(s_r4.name);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(s_r4.email);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(s_r4.studypoints);\n  }\n} // komponentin luokkaosa joka sisältää ts-sovelluslogiikan\n\n\nexport let AdminComponent = /*#__PURE__*/(() => {\n  class AdminComponent {\n    /* konstruktorissa injektoidaan (DI) provider ContactService\r\n       tähän komponenttiin.*/\n    constructor(studentService) {\n      this.studentService = studentService;\n      this.students = []; // taulukko johon opiskelijat tulevat servicestä\n\n      this.addnew = true;\n      this.saveedited = false;\n      this.opnro = '';\n      this.nimi = '';\n      this.email = '';\n      this.opisteet = '';\n      this.id = '';\n    }\n\n    getStudents() {\n      // haetaan opiskelijat servicen avulla tilaamalla observable\n      this.studentService.getStudents().subscribe(data => this.students = data);\n    } // lähetetään uusi opiskelija tai muokattu opiskelija\n\n\n    onSubmit(formData) {\n      console.log(formData); // tässä pitää valita onko kyseessä uuden lisäys vai muokkaus\n      // servicessä on eri metodit postille ja putille\n      // lisätään opiskelija ja laitetaan se heti listaan\n\n      if (this.addnew === true) {\n        this.studentService.addStudent({\n          'studentcode': formData.opnro,\n          'name': formData.nimi,\n          'email': formData.email,\n          'studypoints': formData.opisteet,\n          'grades': [{\n            'coursecode': 'HTS10900',\n            'grade': 0\n          }] // samalla kun data tilataan se pushataan komponentin students -taulukkoon\n\n        }).subscribe(data => this.students.push(data));\n      } // muokataan opiskelijaa ja haetaan heti uusi lista\n\n\n      if (this.saveedited === true) {\n        this.studentService.updateStudent({\n          '_id': formData.id,\n          'studentcode': formData.opnro,\n          'name': formData.nimi,\n          'email': formData.email,\n          'studypoints': formData.opisteet\n        }).subscribe(() => this.getStudents()); // this.getStudents();\n        // nollataan asetukset\n\n        this.addnew = true;\n        this.saveedited = false;\n        this.opnro = '';\n        this.nimi = '';\n        this.email = '';\n        this.opisteet = '';\n        this.id = '';\n      }\n    } // deletoidaan opiskelija ja haetaan ja pushataan uusi lista\n\n\n    delete(s) {\n      console.log('Poistetaan: ' + s._id);\n      this.studentService.delStudent(s._id).subscribe(() => this.getStudents());\n    } // lomakkeen update -metodi joka asettaa\n    // lomekkeelle arvot joita voidaan muokata\n\n\n    update(s) {\n      this.opnro = s.studentcode;\n      this.nimi = s.name;\n      this.email = s.email;\n      this.opisteet = String(s.studypoints);\n      this.id = s._id; // _id pitää kuljettaa mukana vaikka sitä ei muokata\n\n      this.addnew = false;\n      this.saveedited = true;\n    }\n\n    ngOnInit() {\n      this.getStudents();\n    }\n\n  }\n\n  AdminComponent.ɵfac = function AdminComponent_Factory(t) {\n    return new (t || AdminComponent)(i0.ɵɵdirectiveInject(i1.StudentService));\n  };\n\n  AdminComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: AdminComponent,\n    selectors: [[\"app-admin\"]],\n    decls: 39,\n    vars: 8,\n    consts: [[1, \"container-fluid\"], [1, \"d-flex\", \"mt-3\", \"mb-3\"], [3, \"ngSubmit\"], [\"f\", \"ngForm\"], [1, \"form-group\"], [\"for\", \"opiskelijanumero\"], [\"type\", \"text\", \"id\", \"opnro\", \"name\", \"opnro\", \"ngModel\", \"\", 1, \"form-control\", 3, \"ngModel\", \"ngModelChange\"], [\"for\", \"nimi\"], [\"type\", \"text\", \"name\", \"nimi\", \"ngModel\", \"\", 1, \"form-control\", 3, \"ngModel\", \"ngModelChange\"], [\"for\", \"email\"], [\"type\", \"text\", \"name\", \"email\", \"ngModel\", \"\", 1, \"form-control\", 3, \"ngModel\", \"ngModelChange\"], [\"for\", \"opintopisteet\"], [\"type\", \"text\", \"name\", \"opisteet\", \"ngModel\", \"\", 1, \"form-control\", 3, \"ngModel\", \"ngModelChange\"], [\"type\", \"hidden\", \"name\", \"id\", \"ngModel\", \"\", 3, \"ngModel\", \"ngModelChange\"], [\"type\", \"submit\", \"class\", \"btn btn-light\", 4, \"ngIf\"], [1, \"table-responsive\"], [1, \"table\", \"table-striped\"], [4, \"ngFor\", \"ngForOf\"], [\"type\", \"submit\", 1, \"btn\", \"btn-light\"], [\"id\", \"del\", 1, \"btn\", 3, \"click\"], [\"id\", \"upd\", 1, \"btn\", 3, \"click\"]],\n    template: function AdminComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        const _r8 = i0.ɵɵgetCurrentView();\n\n        i0.ɵɵelementStart(0, \"div\", 0)(1, \"div\", 1);\n        i0.ɵɵtext(2, \"Admin\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(3, \"form\", 2, 3);\n        i0.ɵɵlistener(\"ngSubmit\", function AdminComponent_Template_form_ngSubmit_3_listener() {\n          i0.ɵɵrestoreView(_r8);\n\n          const _r0 = i0.ɵɵreference(4);\n\n          return ctx.onSubmit(_r0.value);\n        });\n        i0.ɵɵelementStart(5, \"div\", 4)(6, \"label\", 5);\n        i0.ɵɵtext(7, \"#:\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(8, \"input\", 6);\n        i0.ɵɵlistener(\"ngModelChange\", function AdminComponent_Template_input_ngModelChange_8_listener($event) {\n          return ctx.opnro = $event;\n        });\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(9, \"label\", 7);\n        i0.ɵɵtext(10, \"Nimi:\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(11, \"input\", 8);\n        i0.ɵɵlistener(\"ngModelChange\", function AdminComponent_Template_input_ngModelChange_11_listener($event) {\n          return ctx.nimi = $event;\n        });\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(12, \"label\", 9);\n        i0.ɵɵtext(13, \"Email:\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(14, \"input\", 10);\n        i0.ɵɵlistener(\"ngModelChange\", function AdminComponent_Template_input_ngModelChange_14_listener($event) {\n          return ctx.email = $event;\n        });\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(15, \"label\", 11);\n        i0.ɵɵtext(16, \"Opintopisteet:\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(17, \"input\", 12);\n        i0.ɵɵlistener(\"ngModelChange\", function AdminComponent_Template_input_ngModelChange_17_listener($event) {\n          return ctx.opisteet = $event;\n        });\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(18, \"input\", 13);\n        i0.ɵɵlistener(\"ngModelChange\", function AdminComponent_Template_input_ngModelChange_18_listener($event) {\n          return ctx.id = $event;\n        });\n        i0.ɵɵelementEnd()();\n        i0.ɵɵtemplate(19, AdminComponent_button_19_Template, 2, 0, \"button\", 14);\n        i0.ɵɵtemplate(20, AdminComponent_button_20_Template, 2, 0, \"button\", 14);\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelement(21, \"div\", 1);\n        i0.ɵɵelementStart(22, \"div\", 0)(23, \"div\", 15)(24, \"table\", 16)(25, \"thead\")(26, \"tr\")(27, \"th\");\n        i0.ɵɵtext(28, \"#\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(29, \"th\");\n        i0.ɵɵtext(30, \"Nimi\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(31, \"th\");\n        i0.ɵɵtext(32, \"Email\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(33, \"th\");\n        i0.ɵɵtext(34, \"Opintopisteet\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(35, \"th\")(36, \"th\");\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(37, \"tbody\");\n        i0.ɵɵtemplate(38, AdminComponent_tr_38_Template, 15, 4, \"tr\", 17);\n        i0.ɵɵelementEnd()()()();\n      }\n\n      if (rf & 2) {\n        i0.ɵɵadvance(8);\n        i0.ɵɵproperty(\"ngModel\", ctx.opnro);\n        i0.ɵɵadvance(3);\n        i0.ɵɵproperty(\"ngModel\", ctx.nimi);\n        i0.ɵɵadvance(3);\n        i0.ɵɵproperty(\"ngModel\", ctx.email);\n        i0.ɵɵadvance(3);\n        i0.ɵɵproperty(\"ngModel\", ctx.opisteet);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngModel\", ctx.id);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.addnew);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.saveedited);\n        i0.ɵɵadvance(18);\n        i0.ɵɵproperty(\"ngForOf\", ctx.students);\n      }\n    },\n    directives: [i2.ɵNgNoValidate, i2.NgControlStatusGroup, i2.NgForm, i2.DefaultValueAccessor, i2.NgControlStatus, i2.NgModel, i3.NgIf, i3.NgForOf],\n    encapsulation: 2\n  });\n  return AdminComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}
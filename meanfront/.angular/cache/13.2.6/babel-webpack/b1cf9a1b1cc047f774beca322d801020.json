{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"../auth.service\";\nimport * as i2 from \"@angular/router\";\nimport * as i3 from \"@angular/common\";\n\nfunction NavbarComponent_li_14_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"li\", 7)(1, \"a\", 11);\n    i0.ɵɵtext(2, \"Login\");\n    i0.ɵɵelementEnd()();\n  }\n}\n\nfunction NavbarComponent_li_15_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r3 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"li\", 7)(1, \"a\", 12);\n    i0.ɵɵlistener(\"click\", function NavbarComponent_li_15_Template_a_click_1_listener() {\n      i0.ɵɵrestoreView(_r3);\n      const ctx_r2 = i0.ɵɵnextContext();\n      return ctx_r2.doLogout();\n    });\n    i0.ɵɵtext(2, \"Logout\");\n    i0.ɵɵelementEnd()();\n  }\n}\n\nexport let NavbarComponent = /*#__PURE__*/(() => {\n  class NavbarComponent {\n    constructor(authService) {\n      this.authService = authService; // Tilataan viesti ja tallennetaan tulos this.login -muuttujaan\n\n      this.subscription = this.authService.loginTrue().subscribe(message => {\n        this.login = message;\n      });\n      /* varmistetaan että login -tila säilyy myös kun sivu reffataan\r\n         varmistus tehdään katsomalla onko token sessionstoragessa.\r\n         Yllä oleva observablen tilaus silti tarvitaan, sillä sessionstoragen\r\n         tarkistus vaatii aina reffauksen koska sitä ei voi kutsua asynkronisesti. */\n\n      const atoken = sessionStorage.getItem('accesstoken');\n\n      if (atoken) {\n        this.login = true;\n      } else {\n        this.login = false;\n      }\n    }\n\n    ngOnDestroy() {\n      // lopetetaan tilaus kun komponentti tuhotaan\n      this.subscription.unsubscribe();\n    }\n\n    doLogout() {\n      this.login = false;\n    }\n\n  }\n\n  NavbarComponent.ɵfac = function NavbarComponent_Factory(t) {\n    return new (t || NavbarComponent)(i0.ɵɵdirectiveInject(i1.AuthService));\n  };\n\n  NavbarComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: NavbarComponent,\n    selectors: [[\"app-navbar\"]],\n    decls: 16,\n    vars: 2,\n    consts: [[1, \"navbar\", \"navbar-expand-sm\", \"bg-light\", \"navbar-light\"], [1, \"navbar-header\"], [\"href\", \"#/\", 1, \"navbar-brand\"], [\"type\", \"button\", \"data-toggle\", \"collapse\", \"data-target\", \"#collapsibleNavbar\", 1, \"navbar-toggler\"], [1, \"navbar-toggler-icon\"], [\"id\", \"collapsibleNavbar\", 1, \"collapse\", \"navbar-collapse\"], [1, \"navbar-nav\", \"ml-auto\"], [1, \"nav-item\"], [\"routerLink\", \"/\", 1, \"nav-link\"], [\"routerLink\", \"/admin\", 1, \"nav-link\"], [\"class\", \"nav-item\", 4, \"ngIf\"], [\"routerLink\", \"/login\", 1, \"nav-link\"], [\"routerLink\", \"/login\", 1, \"nav-link\", 3, \"click\"]],\n    template: function NavbarComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"nav\", 0)(1, \"div\", 1)(2, \"a\", 2);\n        i0.ɵɵtext(3, \"Opiskelijarekisteri\");\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(4, \"button\", 3);\n        i0.ɵɵelement(5, \"span\", 4);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(6, \"div\", 5)(7, \"ul\", 6)(8, \"li\", 7)(9, \"a\", 8);\n        i0.ɵɵtext(10, \"Opiskelijat\");\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(11, \"li\", 7)(12, \"a\", 9);\n        i0.ɵɵtext(13, \"Admin\");\n        i0.ɵɵelementEnd()();\n        i0.ɵɵtemplate(14, NavbarComponent_li_14_Template, 3, 0, \"li\", 10);\n        i0.ɵɵtemplate(15, NavbarComponent_li_15_Template, 3, 0, \"li\", 10);\n        i0.ɵɵelementEnd()()();\n      }\n\n      if (rf & 2) {\n        i0.ɵɵadvance(14);\n        i0.ɵɵproperty(\"ngIf\", !ctx.login);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.login);\n      }\n    },\n    directives: [i2.RouterLinkWithHref, i3.NgIf],\n    encapsulation: 2\n  });\n  return NavbarComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}
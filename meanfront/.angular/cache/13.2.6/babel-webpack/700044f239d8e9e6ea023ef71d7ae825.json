{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Injectable } from '@angular/core';\nimport { JwtHelperService } from '@auth0/angular-jwt'; // kirjasto jwt:n käsittelyyn\n\nimport { Subject } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nlet AuthService = class AuthService {\n  constructor(http) {\n    this.http = http;\n    this.apiUrl = 'http://localhost:3000/users/login'; // autentikaatiopalvelun osoite\n\n    this.jwtHelp = new JwtHelperService(); // helpperipalvelu jolla dekoodataan token\n\n    this.subject = new Subject(); // subjectilla viesti navbariin että token on tullut\n    // Jos token on jo sessionStoragessa, otetaan se sieltä muistiin\n    // Jos tokenia ei ole, saadaan tyhjä olio\n\n    const currentUser = JSON.parse(sessionStorage.getItem('accesstoken') || '{}');\n    this.token = currentUser || currentUser.token;\n  }\n  /* login-metodi ottaa yhteyden backendin autentikaatioreittiin, postaa tunnarit\r\n  ja palauttaa Observablena true tai false riippuen siitä saatiinko lähetetyillä\r\n  tunnareilla token backendistä */\n\n\n  login(username, password) {\n    // tässä ei käytetä JSON.stringify -metodia lähtevälle tiedolle\n    return this.http.post(this.apiUrl, {\n      username: username,\n      password: password\n    }).pipe(map(res => {\n      console.log(res); // loggaa alla olevan tyylisen vastauksen\n\n      /*\r\n      {success: true, message:\r\n        \"Tässä on valmis Token!\",\r\n        token: \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZ…zNzV9.x1gWEg9DtoPtEUUHlR8aDgpuzG6NBNJpa2L-MEhyraQ\"}\r\n      */\n\n      const token = res['token']; // otetaan vastauksesta token\n\n      if (token) {\n        this.token = token;\n        /* Tässä tutkitaan onko tokenin payloadin sisältö oikea.\r\n           Jos on, laitetaan token sessionStorageen ja palautetaan true\r\n           jolloin käyttäjä pääsee Admin-sivulle\r\n        */\n\n        try {\n          // dekoodataan token\n          const payload = this.jwtHelp.decodeToken(token);\n          console.log(payload); // Tässä voidaan tarkistaa tokenin oikeellisuus\n\n          if (payload.username === username && payload.isadmin === true) {\n            // token sessionStorageen\n            sessionStorage.setItem('accesstoken', JSON.stringify({\n              username: username,\n              token: token\n            }));\n            this.loginTrue(); // lähetetään viesti navbariin että vaihdetaan login:true -tilaan\n\n            console.log('login onnistui');\n            return true; // saatiin token\n          } else {\n            console.log('login epäonnistui');\n            return false; // ei saatu tokenia\n          }\n        } catch (err) {\n          return false;\n        }\n      } else {\n        console.log('tokenia ei ole');\n        return false;\n      }\n    }));\n  }\n  /* Ilmoitetaan navbariin että koska ollaan loggauduttu,\r\n     niin Logout on mahdollista tehdä, joten vaihdetaan navbariin login-linkin\r\n     tilalle logout-linkki\r\n  */\n\n\n  loginTrue() {\n    this.subject.next(true);\n    return this.subject.asObservable();\n  } // logout poistaa tokenin sessionStoragesta\n\n\n  logout() {\n    this.token = '';\n    sessionStorage.removeItem('accesstoken');\n  }\n\n};\n\nAuthService.ɵfac = function AuthService_Factory(t) {\n  return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient));\n};\n\nAuthService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AuthService,\n  factory: AuthService.ɵfac,\n  providedIn: 'root'\n});\nAuthService = __decorate([Injectable()], AuthService);\nexport { AuthService };","map":null,"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Injectable } from '@angular/core';\nimport { HttpHeaders } from '@angular/common/http';\nimport { catchError } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nconst headers = {\n  headers: new HttpHeaders({\n    'Content-Type': 'application/json'\n  })\n};\nlet StudentService = class StudentService {\n  constructor(http) {\n    this.http = http;\n    this.apiUrl = 'http://localhost:3000/students'; // apin osoite\n  } // HttpClientin DI\n  // Virheenkäsittelymetodi joka palauttaa observablen\n\n\n  handleError(error) {\n    console.error('An error occurred', error);\n    return error.message || error;\n  } // Kaikkien opiskelijoiden haku. Palauttaa observablena opiskelijataulukon\n\n\n  getStudents() {\n    return this.http.get(this.apiUrl).pipe(catchError(this.handleError));\n  } // Opiskelijan haku id:n perusteella. Palauttaa observablena opiskelijan.\n\n  /*\r\n  getStudent(id: number): Observable<Student> {\r\n    const url = `${this.apiUrl}/${id}`;\r\n    return this.http.get<Student>(url)\r\n      .pipe(\r\n        catchError(this.handleError)\r\n      );\r\n  }\r\n  */\n\n  /** POST: lisätään opiskelija palvelimelle.\r\n   * Studentin tyyppi on any, koska _id puuttuu eikä noudateta student.ts:n mallia.\r\n   * _id jätetään pois opiskelijaa lisättaessä, koska Mongo lisää sen automaattisesti\r\n  */\n\n\n  addStudent(student) {\n    // serveri vaatii tokenin jotta kannan muokkaus olisi mahdollista\n    const mytoken = JSON.parse(sessionStorage['accesstoken']);\n    student.token = mytoken.token; // pistetään token bodyn mukana\n\n    return this.http.post(this.apiUrl, student, headers).pipe(catchError(this.handleError));\n  }\n  /** PUT: Päivitetään opiskelija id:n perusteella. */\n\n\n  updateStudent(student) {\n    const mytoken = JSON.parse(sessionStorage['accesstoken']);\n    student.token = mytoken.token; // pistetään token bodyn mukana\n\n    const url = `${this.apiUrl}/${student._id}`;\n    return this.http.put(url, student, headers).pipe(catchError(this.handleError));\n  }\n  /** DELETE: Poistetaan opiskelija id:n perusteella.\r\n   *  Token laitettu menemään headerin mukana\r\n  */\n\n\n  delStudent(id) {\n    const mytoken = JSON.parse(sessionStorage['accesstoken']);\n    const tokenheaders = {\n      headers: new HttpHeaders({\n        'x-access-token': mytoken.token\n      })\n    };\n    const url = `${this.apiUrl}/${id}`;\n    return this.http.delete(url, tokenheaders).pipe(catchError(this.handleError));\n  }\n\n};\n\nStudentService.ɵfac = function StudentService_Factory(t) {\n  return new (t || StudentService)(i0.ɵɵinject(i1.HttpClient));\n};\n\nStudentService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: StudentService,\n  factory: StudentService.ɵfac,\n  providedIn: 'root'\n});\nStudentService = __decorate([Injectable()], StudentService);\nexport { StudentService };","map":null,"metadata":{},"sourceType":"module"}